#!/usr/bin/env python

import pygame
import random

MAX_STARS = 50

class Space:
    def __init__(self, destination):
        self.__layout = destination

        self.bg = pygame.image.load('data/background.png')
        self.stars_spr = []
        self.stars_spr.append(pygame.image.load('data/star1.png'))
        self.stars_spr.append(pygame.image.load('data/star2.png'))
        self.stars_spr.append(pygame.image.load('data/star3.png'))

        self.star = []
        for i in range(MAX_STARS):
            self.star.append((random.randint(0, 1024),
                              random.randint(0, 768),
                              random.randint(1, 9),
                              random.choice(self.stars_spr)))
            
    def update(self):
        self.__layout.blit(self.bg, (0, 0))

        for i in range(MAX_STARS):
            self.__layout.blit(self.star[i][3],
                               (self.star[i][0], self.star[i][1]))
            self.star[i] = (self.star[i][0],
                            self.star[i][1] + self.star[i][2],
                            self.star[i][2],
                            self.star[i][3])
            if self.star[i][1] > (self.__layout.get_rect().height + 20):
                self.star[i] = (random.randint(0, 1024), -5,
                                random.randint(1, 9),
                                random.choice(self.stars_spr))
                
class Player:
    def __init__(self, destination, initial_x = 640):
        self.x = initial_x
        self.y = 700
        self.__layout = destination

        self.ship = pygame.image.load('data/ship.png')

        self.__minx = 0
        self.__maxx = (self.__layout.get_rect().right - 
                       self.ship.get_rect().width)

        self.vx = 0
        self.max_v = 0

    def set_speed(self, vx):
        self.max_v = vx

    def update(self):
        if self.vx < self.max_v:
            self.vx += 1
        if self.vx > self.max_v:
            self.vx -= 1
        self.x += self.vx

        if self.x < self.__minx:
            self.x = self.__minx
        if self.x > self.__maxx:
            self.x = self.__maxx

        self.__layout.blit(self.ship, (self.x, self.y))

    def laser_pos(self):
        return (self.x + 30, self.y)

class PlayerShoot:
    def __init__(self, layout, position):
        self.__layout = layout
        self.shoot = pygame.image.load('data/shoot.png')

        self.x = position[0]
        self.y = position[1]

    def update(self):
        self.y = self.y - 10
        self.__layout.blit(self.shoot, (self.x, self.y))


class Game:
    def __init__(self, screen):
        self.__scr = screen

        self.player = Player(self.__scr)
        self.space = Space(self.__scr)

        self.shoot_sound = pygame.mixer.Sound('data/shoot.wav')

        self.laser = None

    def run(self):

        while 1:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    return
                elif (event.type == pygame.KEYDOWN and
                      event.key == pygame.K_ESCAPE):
                    return
                elif (event.type == pygame.KEYDOWN and
                      event.key == pygame.K_LEFT):
                    self.player.set_speed(-4)
                elif (event.type == pygame.KEYDOWN and
                      event.key == pygame.K_RIGHT):
                    self.player.set_speed(4)
                elif ((event.type == pygame.KEYUP) and
                      (event.key == pygame.K_LEFT) and
                      (self.player.max_v == -4)):
                    self.player.set_speed(0)
                elif ((event.type == pygame.KEYUP) and
                      (event.key == pygame.K_RIGHT) and
                      (self.player.max_v == 4)):
                    self.player.set_speed(0)
                elif (event.type == pygame.KEYDOWN and
                      event.key == pygame.K_SPACE) and not self.laser:
                    self.shoot_sound.play()
                    self.laser = PlayerShoot(self.__scr,
                                             self.player.laser_pos())

            # Draw everything
            self.space.update()
            self.player.update()
            if not (self.laser is None):
                self.laser.update()
                if self.laser.y < -20:
                    self.laser = None

            pygame.display.flip()

if __name__ == '__main__':
    pygame.init()
    screen = pygame.display.set_mode((1024, 768), pygame.FULLSCREEN)
    game = Game(screen)
    game.run()
